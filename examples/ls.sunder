# Simplified (non-POSIX-compliant) version of `ls`.
import "std";

func main() void {
    var path = std::optional[[[]byte]]::EMPTY;

    var parser = std::argument_parser::init((:[][]byte)[]);
    var program = parser.program();
    for parser.advance() {
        if path.is_value() {
            std::print_format_line(
                std::err(),
                "{}: multiple files specified",
                (:[]std::formatter)[
                    std::formatter::init[[[]byte]](&program)]);
            std::exit(std::EXIT_FAILURE);
        }
        path = std::optional[[[]byte]]::init_value(parser.argument_value());
    }

    if path.is_empty() {
        path = std::optional[[[]byte]]::init_value(".");
    }

    var result = std::directory::open(path.value());
    if result.is_error() {
        std::print_format_line(
            std::err(),
            "{}: {}",
            (:[]std::formatter)[
                std::formatter::init[[[]byte]](&program),
                std::formatter::init[[std::error]](&result.error())]);
        std::exit(std::EXIT_FAILURE);
    }

    var dir = result.value();
    defer dir.close();

    for dir.advance() {
        var current = *dir.current();
        if current.is_error() {
            std::print_format_line(
                std::err(),
                "{}: {}",
                (:[]std::formatter)[
                    std::formatter::init[[[]byte]](&program),
                    std::formatter::init[[std::error]](&current.error())]);
        }

        var name = current.value();
        std::print_line(std::out(), name);
    }
}
