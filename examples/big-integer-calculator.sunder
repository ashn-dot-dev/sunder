# Evaluate expressions using std::big_integer operations.
# Expressions are parsed using the grammar:
#
#   expression = "(" expression ")"
#              | expression "+" expression
#              | expression "-" expression
#              | expression "*" expression
#              | expression "/" expression
#              | expression "%" expression
#              | "+" expression
#              | "-" expression
#              | [0-9]+
#
# Example:
#
#   >>> (+123 + -456) * 789 / 42 % 101 - ((1 + 2 + 3) * 4)
#   -118
import "std";

func fatal(message: []byte) void {
    fatal_format("{}", (:[]std::formatter)[std::formatter::init[[[]byte]](&message)]);
}

func fatal_format(format: []byte, args: []std::formatter) void {
    std::print(std::err(), "error: ");
    std::print_format_line(std::err(), format, args);
    std::exit(std::EXIT_FAILURE);
}

struct token {
    # Symbol
    let ADD    = "+";
    let SUB    = "-";
    let MUL    = "*";
    let DIV    = "/";
    let REM    = "%";
    let LPAREN = "(";
    let RPAREN = ")";

    # Literal
    let INT = "integer";

    # Meta
    let EOL = "end-of-line";

    var kind: []byte;
    var data: []byte;

    func is(self: *token, kind: []byte) bool {
        return std::str::eq(self.*.kind, kind);
    }

    func format(self: *token, writer: std::writer, fmt: []byte) std::result[[void, std::error]] {
        if countof(fmt) != 0 {
            return std::result[[void, std::error]]::init_error(std::error::INVALID_ARGUMENT);
        }

        if self.*.is(token::INT) {
            return std::write_format(
                writer,
                "{}({})",
                (:[]std::formatter)[
                    std::formatter::init[[[]byte]](&self.*.kind),
                    std::formatter::init[[[]byte]](&self.*.data)]);
        }

        return std::write_all(writer, self.*.kind);
    }
}

struct tokenizer {
    var source: []byte;
    var offset: usize;

    func init(source: []byte) tokenizer {
        return (:tokenizer){
            .source = source,
            .offset = 0,
        };
    }

    # Returns the next token in the token stream.
    func next_token(self: *tokenizer) token {
        # Skip Whitespace
        for std::ascii::is_whitespace(self.*.current_byte()) {
            assert self.*.current_byte() != '\n';
            self.*.offset = self.*.offset + 1;
        }

        # Integer
        if std::ascii::is_digit(self.*.current_byte()) {
            var start = self.*.offset;
            for std::ascii::is_digit(self.*.current_byte()) {
                self.*.offset = self.*.offset + 1;
            }
            return (:token){
                .kind = token::INT,
                .data = self.*.source[start:self.*.offset]
            };
        }

        # Symbol
        let SYMBOLS = (:[][]byte)[
            token::ADD,
            token::SUB,
            token::MUL,
            token::DIV,
            token::REM,
            token::LPAREN,
            token::RPAREN
        ];
        for i in countof(SYMBOLS) {
            if std::str::starts_with(self.*.current_data(), SYMBOLS[i]) {
                var data = self.*.source[self.*.offset : self.*.offset + countof(SYMBOLS[i])];
                self.*.offset = self.*.offset + countof(SYMBOLS[i]);
                return (:token){
                    .kind = SYMBOLS[i],
                    .data = data,
                };
            }
        }

        # End-of-line
        if self.*.is_eol() {
            return (:token){
                .kind = token::EOL,
                .data = uninit,
            };
        }

        # Invalid token
        fatal("invalid token");
        return std::zeroed[[token]]();
    }

    # Returns true if the current source offset indicates an end-of-line
    # condition.
    func is_eol(self: *tokenizer) bool {
        return self.*.offset >= countof(self.*.source);
    }

    # Source byte at the current source offset or a NUL byte if the current
    # source offset indicates an end-of-line condition.
    func current_byte(self: *tokenizer) byte {
        if self.*.is_eol() {
            return '\0';
        }
        return self.*.source[self.*.offset];
    }

    # Source data at the current source offset or an empty str if the current
    # source offset indicates an end-of-line condition.
    func current_data(self: *tokenizer) []byte {
        if self.*.is_eol() {
            return "";
        }
        return self.*.source[self.*.offset:countof(self.*.source)];
    }
}

struct precedence {
    let LOWEST  = 0u;
    let SUM     = 1u; # + -
    let PRODUCT = 2u; # * / %
    let UNARY   = 3u; # +expression -expression
    let GROUP   = 4u; # ( expression )

    # Returns the precedence corresponding to the provided token or
    # `precedence::LOWEST` if no precedence mapping exists.
    func of_token(token: *token) usize {
        if token.*.is(::token::ADD)
        or token.*.is(::token::SUB) {
            return precedence::SUM;
        }

        if token.*.is(::token::MUL)
        or token.*.is(::token::DIV)
        or token.*.is(::token::REM) {
            return precedence::PRODUCT;
        }

        if token.*.is(::token::LPAREN) {
            return precedence::GROUP;
        }

        return precedence::LOWEST;
    }
}

struct parser {
    var tokenizer: *tokenizer;
    var current: token;

    func init(tokenizer: *tokenizer) parser {
        return (:parser){
            .tokenizer = tokenizer,
            .current = tokenizer.*.next_token()
        };
    }

    # Advance the token stream by one token. Returns the current token in the
    # token stream prior to the advance operation.
    func advance_token(self: *parser) token {
        var current = self.*.current;
        self.*.current = self.*.tokenizer.*.next_token();
        return current;
    }

    # Produce a fatal error if the current token does not match the provided
    # token kind, then advance the token stream by one token. Returns the
    # current token in the token stream prior to the advance operation (i.e.
    # the checked token).
    func expect_current(self: *parser, kind: []byte) token {
        if not self.*.current.is(kind) {
            fatal_format(
                "expected `{}`, found `{}`",
                (:[]std::formatter)[
                    std::formatter::init[[[]byte]](&kind),
                    std::formatter::init[[token]](&self.*.current)]);
        }

        var current = self.*.current;
        self.*.advance_token();
        return current;
    }

    func parse_expression(self: *parser, precedence: usize) expression {
        var optional = parser::nud(&self.*.current);
        if optional.is_empty() {
            fatal_format(
                "unexpected prefix token `{}` in expression",
                (:[]std::formatter)[std::formatter::init[[token]](&self.*.current)]);
        }
        var nud = optional.value();

        var expr = nud(self);
        for precedence < ::precedence::of_token(&self.*.current) {
            var optional = parser::led(&self.*.current);
            if optional.is_empty() {
                return expr;
            }
            var led = optional.value();
            expr = led(self, expr);
        }

        return expr;
    }

    func parse_integer_expression(self: *parser) expression {
        var token = self.*.expect_current(token::INT);
        var result = std::big_integer::init_from_str(token.data, 10);
        var object = integer_expression::new(result.value());
        return expression::init[[integer_expression]](object);
    }

    func parse_unary_expression(self: *parser) expression {
        var operator = self.*.advance_token();
        var rhs = self.*.parse_expression(precedence::UNARY);
        if operator.is(token::ADD) {
            return rhs;
        }

        var object = unary_expression::new(operator, rhs);
        return expression::init[[unary_expression]](object);
    }

    func parse_binary_expression(self: *parser, lhs: expression) expression {
        var operator = self.*.advance_token();
        var rhs = self.*.parse_expression(precedence::of_token(&operator));
        var object = binary_expression::new(operator, lhs, rhs);
        return expression::init[[binary_expression]](object);
    }

    func parse_grouped_expression(self: *parser) expression {
        self.*.expect_current(token::LPAREN);
        var expr = self.*.parse_expression(precedence::LOWEST);
        self.*.expect_current(token::RPAREN);
        return expr;
    }

    # Returns the null denotation associated with the provided token or an
    # empty optional if no such denotation exists.
    func nud(token: *token) std::optional[[func(*parser) expression]] {
        type nud_func = func(*parser) expression;

        if token.*.is(::token::ADD)
        or token.*.is(::token::SUB) {
            return std::optional[[nud_func]]::init_value(parser::parse_unary_expression);
        }

        if token.*.is(::token::LPAREN) {
            return std::optional[[nud_func]]::init_value(parser::parse_grouped_expression);
        }

        if token.*.is(::token::INT) {
            return std::optional[[nud_func]]::init_value(parser::parse_integer_expression);
        }

        return std::optional[[nud_func]]::EMPTY;
    }

    # Returns the left denotation associated with the provided token or an
    # empty optional if no such denotation exists.
    func led(token: *token) std::optional[[func(*parser, expression) expression]] {
        type led_func = func(*parser, expression) expression;

        if token.*.is(::token::ADD)
        or token.*.is(::token::SUB)
        or token.*.is(::token::MUL)
        or token.*.is(::token::DIV)
        or token.*.is(::token::REM) {
            return std::optional[[led_func]]::init_value(parser::parse_binary_expression);
        }

        return std::optional[[led_func]]::EMPTY;
    }
}

struct expression {
    type interface = struct {
        var del: func(*any) void;
        var format: func(*any, std::writer, []byte) std::result[[void, std::error]];
        var evaluate: func(*any) std::big_integer;
    };

    var itable: *interface;
    var object: *any;

    func init[[T]](object: *T) expression {
        let itable = (:interface){
            .del = T::del,
            .format = T::format,
            .evaluate = T::evaluate,
        };
        return (:expression){
            .itable = &itable,
            .object = object,
        };
    }

    # Finalize and deallocate the underlying object backing this expression.
    func fini(self: *expression) void {
        return self.*.itable.*.del(self.*.object);
    }

    # Write a formatted representation of this expression to the provided writer.
    func format(self: *expression, writer: std::writer, fmt: []byte) std::result[[void, std::error]] {
        return self.*.itable.*.format(self.*.object, writer, fmt);
    }

    # Returns the integer value produced by evaluating this expression.
    func evaluate(self: *expression) std::big_integer {
        return self.*.itable.*.evaluate(self.*.object);
    }
}

struct integer_expression {
    var integer: std::big_integer;

    func new(integer: std::big_integer) *integer_expression {
        var self = std::new[[integer_expression]]();
        *self = (:integer_expression){.integer = integer};
        return self;
    }

    func del(self: *integer_expression) void {
        self.*.integer.fini();
        std::delete[[integer_expression]](self);
    }

    func format(self: *integer_expression, writer: std::writer, fmt: []byte) std::result[[void, std::error]] {
        if countof(fmt) != 0 {
            return std::result[[void, std::error]]::init_error(std::error::INVALID_ARGUMENT);
        }

        return std::write_format(
            writer,
            "{}",
            (:[]std::formatter)[std::formatter::init[[std::big_integer]](&self.*.integer)]);
    }

    func evaluate(self: *integer_expression) std::big_integer {
        return std::big_integer::init_assign(&self.*.integer);
    }
}

struct unary_expression {
    var operator: token;
    var rhs: expression;

    func new(operator: token, rhs: expression) *unary_expression {
        var self = std::new[[unary_expression]]();
        *self = (:unary_expression){
            .operator = operator,
            .rhs = rhs,
        };
        return self;
    }

    func del(self: *unary_expression) void {
        self.*.rhs.fini();
        std::delete[[unary_expression]](self);
    }

    func format(self: *unary_expression, writer: std::writer, fmt: []byte) std::result[[void, std::error]] {
        if countof(fmt) != 0 {
            return std::result[[void, std::error]]::init_error(std::error::INVALID_ARGUMENT);
        }

        return std::write_format(
            writer,
            "{}{}",
            (:[]std::formatter)[
                std::formatter::init[[[]byte]](&self.*.operator.kind),
                std::formatter::init[[expression]](&self.*.rhs)]);
    }

    func evaluate(self: *unary_expression) std::big_integer {
        if self.*.operator.is(token::SUB) {
            var res = self.*.rhs.evaluate();
            std::big_integer::neg(&res, &res);
            return res;
        }

        std::panic("unknown expression kind");
        return std::zeroed[[std::big_integer]]();
    }
}

struct binary_expression {
    var operator: token;
    var lhs: expression;
    var rhs: expression;

    func new(operator: token, lhs: expression, rhs: expression) *binary_expression {
        var self = std::new[[binary_expression]]();
        *self = (:binary_expression){
            .operator = operator,
            .lhs = lhs,
            .rhs = rhs,
        };
        return self;
    }

    func del(self: *binary_expression) void {
        self.*.lhs.fini();
        self.*.rhs.fini();
        std::delete[[binary_expression]](self);
    }

    func format(self: *binary_expression, writer: std::writer, fmt: []byte) std::result[[void, std::error]] {
        if countof(fmt) != 0 {
            return std::result[[void, std::error]]::init_error(std::error::INVALID_ARGUMENT);
        }

        return std::write_format(
            writer,
            "({} {} {})",
            (:[]std::formatter)[
                std::formatter::init[[expression]](&self.*.lhs),
                std::formatter::init[[[]byte]](&self.*.operator.kind),
                std::formatter::init[[expression]](&self.*.rhs)]);
    }

    func evaluate(self: *binary_expression) std::big_integer {
        var lhs = self.*.lhs.evaluate();
        defer lhs.fini();

        var rhs = self.*.rhs.evaluate();
        defer rhs.fini();

        var res = std::big_integer::init();

        if self.*.operator.is(token::ADD) {
            std::big_integer::add(&res, &lhs, &rhs);
            return res;
        }

        if self.*.operator.is(token::SUB) {
            std::big_integer::sub(&res, &lhs, &rhs);
            return res;
        }

        if self.*.operator.is(token::MUL) {
            std::big_integer::mul(&res, &lhs, &rhs);
            return res;
        }

        if self.*.operator.is(token::DIV) {
            std::big_integer::div(&res, &lhs, &rhs);
            return res;
        }

        if self.*.operator.is(token::REM) {
            std::big_integer::rem(&res, &lhs, &rhs);
            return res;
        }

        std::panic("unknown expression kind");
        return std::zeroed[[std::big_integer]]();
    }
}

func main() void {
    var opt_tree = false;
    var argparser = std::argument_parser::init((:[][]byte)["t", "tree"]);
    for argparser.advance() {
        if argparser.check_option("t") or argparser.check_option("tree") {
            opt_tree = true;
            continue;
        }

        var argument = argparser.argument_value();
        fatal_format(
            "invalid argument `{}`",
            (:[]std::formatter)[std::formatter::init[[[]byte]](&argument)]);
     }

    for true {
        std::print(std::out(), ">>> ");
        var result = std::read_line(std::input());
        if result.is_error() {
            fatal(result.error().*.data);
        }

        var optional = result.value();
        if optional.is_empty() {
            std::print_line(std::out(), "quit");
            break; # end-of-file quit
        }

        var source = optional.value();
        defer std::slice[[byte]]::delete(source);
        if std::str::eq(std::ascii::view_trimmed(source), "quit") {
            break; # command quit
        }

        var tokenizer = tokenizer::init(source);
        var parser = parser::init(&tokenizer);
        var expr = parser.parse_expression(precedence::LOWEST);
        defer expr.fini();
        parser.expect_current(token::EOL);

        var evaluated = expr.evaluate();
        defer evaluated.fini();
        if opt_tree {
            std::print_format_line(
                std::out(),
                "{}",
                (:[]std::formatter)[std::formatter::init[[expression]](&expr)]);
        }
        std::print_format_line(
            std::out(),
            "{}",
            (:[]std::formatter)[std::formatter::init[[std::big_integer]](&evaluated)]);
    }
}
