import "std";

func main() void {
    let NEGATIVE_ZERO = -0.0f64;
    let POSITIVE_ZERO = +0.0f64;
    assert NEGATIVE_ZERO.hash() == POSITIVE_ZERO.hash();

    let NAN: f64 = 0.0 / 0.0;

    var map = std::hash_map[[f64, []byte]]::init();
    defer map.fini();

    map.insert(NEGATIVE_ZERO, "foo");
    map.insert(POSITIVE_ZERO, "bar"); # should overwrite "foo"
    map.insert(NAN, "baz");
    map.insert(NAN, "qux"); # should not overwrite "baz" (NaN != NaN)
    map.insert(123.456, "qux");

    assert map.count() == 4;
    assert map.contains(&0.0f64);
    # assert map.contains(NAN); # no way to test this since NaN != NaN
    assert map.contains(&123.456f64);

    var iter = map.iterator();
    for iter.advance() {
        std::print_format_line(
            std::out(),
            "{.3}: \"{e}\"",
            (:[]std::formatter)[
                std::formatter::init[[f64]](iter.current().*.key),
                std::formatter::init[[[]byte]](iter.current().*.value)]);
    }
}
################################################################################
# 0.000: "bar"
# NaN: "baz"
# NaN: "qux"
# 123.456: "qux"
