import "sys";

struct empty { }

var empty_a: empty = (:empty){};
let empty_b: empty = (:empty){};

struct contains_empty {
    var e: empty;
}

var contains_empty_a: contains_empty = (:contains_empty){.e = empty_b};
let contains_empty_b: contains_empty = (:contains_empty){.e = empty_b};

struct point {
    var x: u32;
    var y: u32;
}

var point_a: point = (:point){.x = 0x00112233, .y = 0xAABBCCDD};
let point_b: point = (:point){.x = 0, .y = 0xFFFFFFFF};
let point_c: point = (:point){.y = 0xEEEEEEEE, .x = 0};
let point_d: point = (:point){
    .x = point_b.x + 1,
    .y = point_b.y - 1
};
let array: [2u]u32 = (:[2u]u32)[0xDEADBEEF, 0xCAFEF00D];
let point_e: point = (:point){
    .x = array[0],
    .y = array[1]
};


# Contains self-referential *foo and []foo types as well as alignment padding
# between the bool and pointer members. At the time of writing integer->pointer
# casts are not allowed in constant expressions, so instances of foo are all
# defined in main.
struct foo {
    var w: s32;
    var x: bool;
    var y: *foo;
    var z: []foo;
}

# Contains packed u8 and u16 members to check alignment.
struct bar {
    var w: u8;
    var x: u8;
    var y: u8;
    var z: u8;
    var p: u16;
    var q: u16;
    var r: u8;
    var s: u16;
}
let bar_a: bar = (:bar){
    .w = 0xAA,
    .x = 0xBB,
    .y = 0xCC,
    .z = 0xDD,
    .p = 0x0011,
    .q = 0x2233,
    .r = 0x44,
    .s = 0x5566
};

# Contains member variables, member constants, member functions, and type
# aliases.
struct baz {
    var value_a: u8;
    var value_b: u8;

    let CONSTANT_A: u8 = 0xE1;
    let CONSTANT_B: u8 = CONSTANT_A + 1;
    let CONSTANT_C: u8 = baz::CONSTANT_B + 1;

    let CONSTANT_D = 0xE1u8;
    let CONSTANT_E = CONSTANT_D + 1;
    let CONSTANT_F = baz::CONSTANT_E + 1;

    type TYPE_A = ssize;
    type TYPE_B = foo;

    func init(value_a: u8, value_b: u8) baz {
        return (:baz){
            .value_a = value_a,
            .value_b = value_b
        };
    }

    func init_copy(from: *baz) baz {
        return baz::init((*from).value_a, (*from).value_b);
    }

    func sum(self: *baz) u16 {
        return (:u16)(*self).value_a + (:u16)(*self).value_b;
    }
}
let baz_a: baz = (:baz){.value_a = 0xAA, .value_b = 0xBB};

struct zero_sized_member_offsets_a {
    var w: void; # zero-sized
    var x: s32;
    var y: [0]u8; # zero-sized
    var z: u64;
}

struct zero_sized_member_offsets_b {
    var w: s32;
    var x: void; # zero-sized
    var y: u64;
    var z: [0]u8; # zero-sized
}

# Contains members with identifiers that are C keywords.
struct c_keywords {
    var int: ssize;
    let register: ssize = 123;
    func auto() void { }
}

func main() void {
    sys::dump[[empty]](empty_a);
    sys::dump[[empty]](empty_b);
    empty_a = empty_b;
    sys::dump[[empty]](empty_a);

    sys::dump[[contains_empty]](contains_empty_a);
    sys::dump[[contains_empty]](contains_empty_b);
    contains_empty_a = contains_empty_b;
    sys::dump[[contains_empty]](contains_empty_a);
    contains_empty_a.e = (:empty){};

    sys::dump[[point]](point_a);
    sys::dump[[u32]](point_a.x);
    sys::dump[[u32]](point_a.y);
    point_a.x = 0xDEADBEEF;
    sys::dump[[point]](point_a);
    sys::dump[[u32]](point_a.x);
    sys::dump[[u32]](point_a.y);
    sys::dump[[point]](point_b);
    sys::dump[[point]](point_c);
    sys::dump[[point]](point_d);
    sys::dump[[point]](point_e);
    point_a = point_b;
    sys::dump[[point]](point_a);

    sys::dump[[point]]((:point){.x = array[0], .y = array[1]});
    sys::dump[[u32]]((:point){.x = array[0], .y = array[1]}.x);

    var foo_a: foo = (:foo){
        .w = 1s32,
        .x = true,
        .y = (:*foo)0u,
        .z = (:[]foo){(:*foo)0u, 0u}
    };

    var foo_b_: foo = (:foo){
        .z = (:[]foo){&foo_a, 1u},
        .y = &foo_a,
        .x = true,
        .w = 1s32
    };

    # Same definition is used for bar_a and bar_b. Check to make sure they
    # produce the same byte representation.
    var bar_b: bar = (:bar){
        .w = 0xAA,
        .x = 0xBB,
        .y = 0xCC,
        .z = 0xDD,
        .p = 0x0011,
        .q = 0x2233,
        .r = 0x44,
        .s = 0x5566
    };
    sys::dump[[bar]](bar_a);
    sys::dump[[bar]](bar_b);

    sys::dump[[baz]](baz_a);
    var baz_b: baz = baz::init(0xCC, 0xDD);
    sys::dump[[baz]](baz_b);
    var baz_c: baz = baz::init_copy(&baz_b);
    sys::dump[[baz]](baz_c);
    sys::dump[[u8]](baz::CONSTANT_A);
    sys::dump[[u8]](baz::CONSTANT_B);
    sys::dump[[u8]](baz::CONSTANT_C);
    sys::dump[[u16]](baz::sum(&baz_c));
    sys::dump[[u16]](baz_c.sum());

    # Check that type aliases can be used where a type is expected.
    var baz_type_a_: baz::TYPE_A = uninit;
    type T = typeof(baz_a);
    var baz_type_b_: T::TYPE_B = uninit;

    # Check that struct member initializer lists can contain a final comma
    # before the closing brace.
    (:point){
        .x = 123,
        .y = 456,
    };

    # Check that a pointer to the zero-sized members within a struct will
    # produce a pointer that still points within the struct instance.
    var object: zero_sized_member_offsets_a = uninit;
    sys::dump[[bool]](sizeof(typeof(object.w)) == 0);
    sys::dump[[bool]](sizeof(typeof(object.x)) != 0);
    sys::dump[[bool]]((:usize)&object.w == (:usize)&object.x);
    sys::dump[[bool]](sizeof(typeof(object.y)) == 0);
    sys::dump[[bool]](sizeof(typeof(object.z)) != 0);
    sys::dump[[bool]]((:usize)&object.y >  (:usize)&object.x);
    sys::dump[[bool]]((:usize)&object.y <= (:usize)&object.z);
    var object: zero_sized_member_offsets_b = uninit;
    sys::dump[[bool]](sizeof(typeof(object.w)) != 0);
    sys::dump[[bool]](sizeof(typeof(object.x)) == 0);
    sys::dump[[bool]]((:usize)&object.w <= (:usize)&object.x);
    sys::dump[[bool]](sizeof(typeof(object.y)) != 0);
    sys::dump[[bool]](sizeof(typeof(object.z)) == 0);
    sys::dump[[bool]]((:usize)&object.y <= (:usize)&object.z);

    # Check that padding is zeroed when declaring and assigning to a struct
    # variable.
    var object: foo = uninit;
    var buf = (:[]byte){(:*byte)&object, sizeof(typeof(object))};
    for i in countof(buf) {
        buf[i] = 0xFF;
    }
    sys::dump[[foo]](object);
    object = (:foo){
        .w = (:s32)0xFFFFFFFFu32,
        .x = true,
        .y = (:*foo)0xFFFFFFFFFFFFFFFFu,
        .z = (:[]foo){(:*foo)0xFFFFFFFFFFFFFFFFu, 0xFFFFFFFFFFFFFFFFu},
    };
    sys::dump[[foo]](object);

    var _ = (:c_keywords){.int = 0xDEADBEEF};
    c_keywords::register;
    c_keywords::auto();
}

################################################################################
#
#
#
#
#
#
# 33 22 11 00 DD CC BB AA
# 33 22 11 00
# DD CC BB AA
# EF BE AD DE DD CC BB AA
# EF BE AD DE
# DD CC BB AA
# 00 00 00 00 FF FF FF FF
# 00 00 00 00 EE EE EE EE
# 01 00 00 00 FE FF FF FF
# EF BE AD DE 0D F0 FE CA
# 00 00 00 00 FF FF FF FF
# EF BE AD DE 0D F0 FE CA
# EF BE AD DE
# AA BB CC DD 11 00 33 22 44 00 66 55
# AA BB CC DD 11 00 33 22 44 00 66 55
# AA BB
# CC DD
# CC DD
# E1
# E2
# E3
# A9 01
# A9 01
# 01
# 01
# 01
# 01
# 01
# 01
# 01
# 01
# 01
# 01
# 01
# 01
# 01
# FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF
# FF FF FF FF 01 00 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF
