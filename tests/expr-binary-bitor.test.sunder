import "std";
import "sys";

func main() void {
    let t_bitor_t: bool = true | true;
    let f_bitor_f: bool = false | false;
    let t_bitor_f: bool = true | false;
    let f_bitor_t: bool = false | true;

    sys::dump[[bool]](t_bitor_t);
    sys::dump[[bool]](f_bitor_f);
    sys::dump[[bool]](t_bitor_f);
    sys::dump[[bool]](f_bitor_t);

    std::print(std::err(), "\n");

    sys::dump[[bool]](true | true);
    sys::dump[[bool]](false | false);
    sys::dump[[bool]](true | false);
    sys::dump[[bool]](false | true);

    std::print(std::err(), "\n");

    let byte_a: byte = 0xABy;
    let byte_b: byte = 0xFFy;
    let byte_c: byte = 0x00y;
    let byte_d: byte = 0b10101100y;
    let byte_e: byte = 0b11001010y;
    let byte_a_bitor_byte_a: byte = byte_a | byte_a;
    let byte_a_bitor_byte_b: byte = byte_a | byte_b;
    let byte_a_bitor_byte_c: byte = byte_a | byte_c;
    let byte_d_bitor_byte_e: byte = byte_d | byte_e;

    sys::dump[[byte]](byte_a_bitor_byte_a);
    sys::dump[[byte]](byte_a_bitor_byte_b);
    sys::dump[[byte]](byte_a_bitor_byte_c);
    sys::dump[[byte]](byte_d_bitor_byte_e);

    std::print(std::err(), "\n");

    sys::dump[[u8]](0xABu8 | 0xABu8);
    sys::dump[[u8]](0xABu8 | 0xFFu8);
    sys::dump[[u8]](0xABu8 | 0x00u8);
    sys::dump[[u8]](0b10101100u8 | 0b11001010u8);

    std::print(std::err(), "\n");

    let u32_a: u32 = 0xDEADBEEFu32;
    let u32_b: u32 = 0xFFFFFFFFu32;
    let u32_c: u32 = 0x00000000u32;
    let u32_d: u32 = 0b10101100111100001111111100000000u32;
    let u32_e: u32 = 0b11001010110011001111111100000000u32;
    let u32_a_bitor_u32_a: u32 = u32_a | u32_a;
    let u32_a_bitor_u32_b: u32 = u32_a | u32_b;
    let u32_a_bitor_u32_c: u32 = u32_a | u32_c;
    let u32_d_bitor_u32_e: u32 = u32_d | u32_e;

    sys::dump[[u32]](u32_a_bitor_u32_a);
    sys::dump[[u32]](u32_a_bitor_u32_b);
    sys::dump[[u32]](u32_a_bitor_u32_c);
    sys::dump[[u32]](u32_d_bitor_u32_e);

    std::print(std::err(), "\n");

    sys::dump[[u32]](0xDEADBEEFu32 | 0xDEADBEEFu32);
    sys::dump[[u32]](0xDEADBEEFu32 | 0xFFFFFFFFu32);
    sys::dump[[u32]](0xDEADBEEFu32 | 0x00000000u32);
    sys::dump[[u32]](0b10101100111100001111111100000000u32 | 0b11001010110011001111111100000000u32);

    std::print(std::err(), "\n");

    let s8_a: s8 = -128s8; # 0x80 as s8
    let s8_b: s8 = -1s8; # 0xFF as s8
    let s8_c: s8 = 0s8; # 0x00 as s8
    let s8_a_bitor_s8_a: s8 = s8_a | s8_a;
    let s8_a_bitor_s8_b: s8 = s8_a | s8_b;
    let s8_a_bitor_s8_c: s8 = s8_a | s8_c;

    sys::dump[[s8]](s8_a_bitor_s8_a);
    sys::dump[[s8]](s8_a_bitor_s8_b);
    sys::dump[[s8]](s8_a_bitor_s8_c);

    std::print(std::err(), "\n");

    sys::dump[[s8]](-128s8 | -128s8);
    sys::dump[[s8]](-128s8 | -1s8);
    sys::dump[[s8]](-128s8 | 0s8);

    std::print(std::err(), "\n");

    let s16_a: s16 = -32768s16; # 0x8000 as s16
    let s16_b: s16 = -1s16; # 0xFFFF as s16
    let s16_c: s16 = 0s16; # 0x0000 as s16
    let s16_d: s16 = -16657s16; # 0xBEEF as s16
    let s16_e: s16 = 0x0123s16;
    let s16_a_bitor_s16_a: s16 = s16_a | s16_a;
    let s16_a_bitor_s16_b: s16 = s16_a | s16_b;
    let s16_a_bitor_s16_c: s16 = s16_a | s16_c;
    let s16_d_bitor_s16_b: s16 = s16_d | s16_b;
    let s16_d_bitor_s16_c: s16 = s16_d | s16_c;
    let s16_e_bitor_s16_b: s16 = s16_e | s16_b;
    let s16_e_bitor_s16_c: s16 = s16_e | s16_c;

    sys::dump[[s16]](s16_a_bitor_s16_a);
    sys::dump[[s16]](s16_a_bitor_s16_b);
    sys::dump[[s16]](s16_a_bitor_s16_c);
    sys::dump[[s16]](s16_d_bitor_s16_b);
    sys::dump[[s16]](s16_d_bitor_s16_c);
    sys::dump[[s16]](s16_e_bitor_s16_b);
    sys::dump[[s16]](s16_e_bitor_s16_c);

    std::print(std::err(), "\n");

    sys::dump[[s16]](-32768s16 | -32768s16);
    sys::dump[[s16]](-32768s16 | -1s16);
    sys::dump[[s16]](-32768s16 | 0s16);
    sys::dump[[s16]](-16657s16 | -1s16);
    sys::dump[[s16]](-16657s16 | 0s16);
    sys::dump[[s16]](0x0123s16 | -1s16);
    sys::dump[[s16]](0x0123s16 | 0s16);

    std::print(std::err(), "\n");

    # Cast a byte literal to u16 before bitwise OR.
    var bits = 0x2800 | (:u16)0xB9y;
    sys::dump[[u16]](bits);

    # Cast a byte variable to u16 before bitwise OR.
    var data = 0xB9y;
    var bits = 0x2800 | (:u16)data;
    sys::dump[[u16]](bits);

    # Cast a byte constant to u16 before bitwise OR.
    let data = 0xB9y;
    var bits = 0x2800 | (:u16)data;
    sys::dump[[u16]](bits);
}
################################################################################
# 01
# 00
# 01
# 01
#
# 01
# 00
# 01
# 01
#
# AB
# FF
# AB
# EE
#
# AB
# FF
# AB
# EE
#
# EF BE AD DE
# FF FF FF FF
# EF BE AD DE
# 00 FF FC EE
#
# EF BE AD DE
# FF FF FF FF
# EF BE AD DE
# 00 FF FC EE
#
# 80
# FF
# 80
#
# 80
# FF
# 80
#
# 00 80
# FF FF
# 00 80
# FF FF
# EF BE
# FF FF
# 23 01
#
# 00 80
# FF FF
# 00 80
# FF FF
# EF BE
# FF FF
# 23 01
#
# B9 28
# B9 28
# B9 28
