import "std";

struct foo {
    var text: []byte;
    var number: ssize;

    func init(text: []byte, number: ssize) foo {
        return (:foo){.text = text, .number = number};
    }

    func fini(self: *foo) void {
        std::print_format_line(
            std::out(),
            "{}-{}",
            (:[]std::formatter)[
                std::formatter::init[[typeof(self.*.text)]](&self.*.text),
                std::formatter::init[[typeof(self.*.number)]](&self.*.number)]);
    }

    func hash(self: *foo) usize {
        return self.*.text.hash();
    }

    func eq(lhs: *foo, rhs: *foo) bool {
        return std::str::eq(lhs.*.text, rhs.*.text);
    }
}

func main() void {
    var set = std::hash_set[[foo]]::init();
    set.insert(foo::init("a", 123));
    set.insert(foo::init("b", 456));
    set.insert(foo::init("c", 789));
    var removed = set.remove(&foo::init("b", 456)); # removes, but does not finalize, b-456
    assert removed.is_value();
    set.fini();
    var removed = removed.value();
    removed.fini(); # explicitly finalize b-456

    std::print(std::out(), "\n");

    var set = std::hash_set[[foo]]::init();
    set.update(foo::init("a", 123));
    set.update(foo::init("b", 456));
    set.update(foo::init("c", 789));
    set.erase(&foo::init("b", 456)); # removes and finalizes b-456
    set.fini();
}
################################################################################
# a-123
# c-789
# b-456
#
# b-456
# a-123
# c-789
