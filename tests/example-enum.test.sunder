import "sys";
import "std";

enum empty { }

let empty_uninit: empty = uninit;
var empty_cast_variable: empty = (:empty)0x66666666;
let empty_cast_constant: empty = (:empty)0x66666666;

enum foo {
    A;
    B;
    C;
}

var foo_uninit: foo = uninit;
let foo_a = foo::A;
let foo_b = foo::B;
let foo_c = foo::C;
let foo_x: foo = foo::C;

let FOO_ARRAY = (:[3]foo)[
    foo::A,
    foo::B,
    foo::C,
];

let FOO_SLICE = (:[]foo)[
    foo::A,
    foo::B,
    foo::C,
];

enum bar {
    A = 0xAA;
    B = 0xBB;
    C = 0xCC;
}

let bar_uninit: bar = uninit;
let bar_a = bar::A;
let bar_b = bar::B;
let bar_c = bar::C;
let bar_x: bar = bar::C;

enum baz {
    A = 42;
    B;
    C = 100 + 1;
    D = 500s64;
    E = (:s32)3.14f32;
}

let baz_uninit: baz = uninit;
let baz_a = baz::A;
let baz_b = baz::B;
let baz_c = baz::C;
let baz_d = baz::D;
let baz_e = baz::E;
let baz_x: baz = baz_e;

# Anonymous enums have their constants added to the enclosing scope.
type qux = enum {
    QUX_A = 0xAA;
    QUX_B = 42;
    QUX_C;
};
let qux_a_1 = qux::QUX_A;
let qux_a_2 = QUX_A;
let qux_b_1 = qux::QUX_B;
let qux_b_2 = QUX_B;
let qux_c_1 = qux::QUX_C;
let qux_c_2 = QUX_C;

# Enum with member functions.
enum withmembfuncs {
    A;
    B;

    func to_str(self: *withmembfuncs) []byte {
        if *self == withmembfuncs::A {
            return "A";
        }
        if *self == B {
            return "B";
        }
        return "unknown";
    }
}

# Example of a tagged union using an anonymous enum.
struct tagged {
    var kind: enum {
        THIS;
        THAT;
    };
    var data: union {
        var this: usize;
        var that: []byte;
    };

    func init_this(value: usize) tagged {
        var self = (:tagged) {
            .kind = tagged::THIS, # reference using <enclosing-type>::<name>
            .data = uninit,
        };
        self.data.this = value;
        return self;
    }

    func init_that(value: []byte) tagged {
        var self = (:tagged) {
            .kind = THAT, # reference using <name> without enclosing type
            .data = uninit,
        };
        self.data.that = value;
        return self;
    }
}

# Enums with explicitly sized underlying types.
enum underlying_type_u32: u32 { A; B; C = u32::MAX; }
enum underlying_type_s64: s64 { A; B; C = s64::MAX; }
enum underlying_type_forward: forward { A = (:forward)underlying_type_s64::A; B = (:forward)underlying_type_u32::B; }
type underlying_type_u32_anonymous = enum: u32 { A_U32; B_U32; C_U32 = u32::MAX; };
type underlying_type_forward_anonymous = enum: forward { A_FORWARD; B_FORWARD; };
type forward = s8;

# Ensure that explicitly-sized and non-explicitly sized enums have the
# `underlying_type` symbol defined.
var some_foo: s32 = (:foo::underlying_type)foo::A; # default type should be s32
var some_u32: u32 = (:underlying_type_u32::underlying_type)underlying_type_u32::A;
var some_s64: s64 = (:underlying_type_s64::underlying_type)underlying_type_s64::A;
enum some_enum: u32 { A = 123; B = 456; }
var some_x = (:some_enum::underlying_type)some_enum::A;
var some_y: some_enum::underlying_type = uninit;

func main() void {
    sys::dump[[empty]](empty_uninit);
    sys::dump[[empty]](empty_cast_variable);
    sys::dump[[empty]](empty_cast_constant);

    std::print(std::err(), "\n");

    sys::dump[[foo]](foo_uninit);
    sys::dump[[foo]](foo_a);
    sys::dump[[foo]](foo_b);
    sys::dump[[foo]](foo_c);
    sys::dump[[foo]](foo_x);
    sys::dump[[foo]](FOO_ARRAY[0]);
    sys::dump[[foo]](FOO_ARRAY[1]);
    sys::dump[[foo]](FOO_ARRAY[2]);
    sys::dump[[foo]](FOO_SLICE[0]);
    sys::dump[[foo]](FOO_SLICE[1]);
    sys::dump[[foo]](FOO_SLICE[2]);

    std::print(std::err(), "\n");

    sys::dump[[bar]](bar_uninit);
    sys::dump[[bar]](bar_a);
    sys::dump[[bar]](bar_b);
    sys::dump[[bar]](bar_c);
    sys::dump[[bar]](bar_x);

    std::print(std::err(), "\n");

    sys::dump[[baz]](baz_uninit);
    sys::dump[[baz]](baz_a);
    sys::dump[[baz]](baz_b);
    sys::dump[[baz]](baz_c);
    sys::dump[[baz]](baz_d);
    sys::dump[[baz]](baz_e);
    sys::dump[[baz]](baz_x);

    std::print(std::err(), "\n");

    sys::dump[[qux]](qux_a_1);
    sys::dump[[qux]](qux_a_2);
    sys::dump[[qux]](qux_b_1);
    sys::dump[[qux]](qux_b_2);
    sys::dump[[qux]](qux_c_1);
    sys::dump[[qux]](qux_c_2);

    std::print(std::err(), "\n");

    # Cast to enum types.
    var e = (:foo)0xBEEF;
    sys::dump[[foo]](e);
    var e = (:foo)0xBEEFs32;
    sys::dump[[foo]](e);
    var e = (:foo)0xBEEFu32;
    sys::dump[[foo]](e);
    var e = (:foo)0xBEEFs;
    sys::dump[[foo]](e);
    var e = (:foo)0xFFy;
    sys::dump[[foo]](e);
    std::print(std::err(), "\n");
    let e = (:foo)0xBEEFs32;
    sys::dump[[foo]](e);
    let e = (:foo)0xBEEFu32;
    sys::dump[[foo]](e);
    let e = (:foo)0xBEEFs;
    sys::dump[[foo]](e);
    let e = (:foo)0xFFy;
    sys::dump[[foo]](e);
    let e = (:foo)-1s16;
    sys::dump[[foo]](e);
    let e = (:foo)true;
    sys::dump[[foo]](e);
    let e = (:foo)bar::A;
    sys::dump[[foo]](e);

    std::print(std::err(), "\n");

    # Cast from enum types.
    var x = (:s32)bar::A;
    sys::dump[[typeof(x)]](x);
    var x = (:u32)bar::A;
    sys::dump[[typeof(x)]](x);
    var x = (:ssize)bar::A;
    sys::dump[[typeof(x)]](x);
    var x = (:byte)bar::A;
    sys::dump[[typeof(x)]](x);
    std::print(std::err(), "\n");
    let x = (:s32)bar::A;
    sys::dump[[typeof(x)]](x);
    let x = (:u32)bar::A;
    sys::dump[[typeof(x)]](x);
    let x = (:ssize)bar::A;
    sys::dump[[typeof(x)]](x);
    let x = (:byte)bar::A;
    sys::dump[[typeof(x)]](x);
    let x = (:bool)true;
    sys::dump[[typeof(x)]](x);

    std::print(std::err(), "\n");

    std::print_line(std::err(), withmembfuncs::A.to_str());
    std::print_line(std::err(), withmembfuncs::B.to_str());

    std::print(std::err(), "\n");

    var this = tagged::init_this(0xDEADBEEF);
    var that = tagged::init_that("DEADBEEF");
    assert this.kind == tagged::THIS;
    assert that.kind == tagged::THAT;
    sys::dump[[typeof(this.data.this)]](this.data.this);
    std::print_line(std::err(), that.data.that);

    std::print(std::err(), "\n");

    sys::dump[[underlying_type_u32]](underlying_type_u32::A);
    sys::dump[[underlying_type_u32]](underlying_type_u32::B);
    sys::dump[[underlying_type_u32]](underlying_type_u32::C);
    sys::dump[[underlying_type_s64]](underlying_type_s64::A);
    sys::dump[[underlying_type_s64]](underlying_type_s64::B);
    sys::dump[[underlying_type_s64]](underlying_type_s64::C);
    sys::dump[[underlying_type_u32_anonymous]](A_U32);
    sys::dump[[underlying_type_u32_anonymous]](B_U32);
    sys::dump[[underlying_type_u32_anonymous]](C_U32);

    # Enums can be compared for equality, but not ordered (without a cast).
    assert foo::A == foo::A;
    assert foo::A != foo::B;
}
################################################################################
# 00 00 00 00
# 66 66 66 66
# 66 66 66 66
#
# 00 00 00 00
# 00 00 00 00
# 01 00 00 00
# 02 00 00 00
# 02 00 00 00
# 00 00 00 00
# 01 00 00 00
# 02 00 00 00
# 00 00 00 00
# 01 00 00 00
# 02 00 00 00
#
# 00 00 00 00
# AA 00 00 00
# BB 00 00 00
# CC 00 00 00
# CC 00 00 00
#
# 00 00 00 00
# 2A 00 00 00
# 2B 00 00 00
# 65 00 00 00
# F4 01 00 00
# 03 00 00 00
# 03 00 00 00
#
# AA 00 00 00
# AA 00 00 00
# 2A 00 00 00
# 2A 00 00 00
# 2B 00 00 00
# 2B 00 00 00
#
# EF BE 00 00
# EF BE 00 00
# EF BE 00 00
# EF BE 00 00
# FF 00 00 00
#
# EF BE 00 00
# EF BE 00 00
# EF BE 00 00
# FF 00 00 00
# FF FF FF FF
# 01 00 00 00
# AA 00 00 00
#
# AA 00 00 00
# AA 00 00 00
# AA 00 00 00 00 00 00 00
# AA
#
# AA 00 00 00
# AA 00 00 00
# AA 00 00 00 00 00 00 00
# AA
# 01
#
# A
# B
#
# EF BE AD DE 00 00 00 00
# DEADBEEF
#
# 00 00 00 00
# 01 00 00 00
# FF FF FF FF
# 00 00 00 00 00 00 00 00
# 01 00 00 00 00 00 00 00
# FF FF FF FF FF FF FF 7F
# 00 00 00 00
# 01 00 00 00
# FF FF FF FF
