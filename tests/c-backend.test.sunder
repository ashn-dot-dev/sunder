# Sunder source file used to develop the C backend.
#
# This file was originally used to port Sunder language features from the NASM
# backend to the C backend. The language features exercised here consist of a
# mishmash of the commonly used parts of Sunder as well as some miscellaneous
# edge cases that were uncovered during the porting process. This file is kept
# here both for historical reasons, and because it is nice to have some of
# these edge cases continue to be exercised as the C backend grows and evolves.

struct struct_with_no_members {
    func init() struct_with_no_members {
        return (:struct_with_no_members){};
    }
}

struct struct_with_zero_sized_members {
    var a: void;
    var b: struct_with_no_members;
}

struct struct_with_zero_and_non_zero_sized_members {
    var a: void;
    var b: s32;
    var c: struct_with_no_members;
    var d: struct_with_zero_sized_members;
    var e: usize;
    var f: point;
}

struct point {
    var x: ssize;
    var y: ssize;

    let ZERO = (:point){.x = 0, .y = uninit};

    let SLICE = (:[]point)[
        (:point){.x = 0x123, .y = 0x456},
        (:point){.x = 0xABC, .y = 0xDEF},
    ];

    func init(x: ssize, y: ssize) point {
        return (:point){
            .x = x,
            .y = y,
        };
    }

    func clone(self: *point) point {
        return *self;
    }
}

var void_variable: void = uninit;
let void_constant: void = uninit;
var bool_variable_true = true;
var bool_variable_false = false;
let bool_constant_true = true;
let bool_constant_false = false;
var int_variable = 123s;
var int_constant = 456s;
var str_variable = "ABC";
let str_constant = "DEF";
let int_variable_pointer = &int_variable;
let int_constant_pointer = &int_constant;
let array_constant = (:[3]ssize)[123, 456, 789];
let slice_constant = (:[]ssize)[123, 456, 789];

let pointer_from_usize = (:*byte)0xAABBCCDDAABBCCDDu;

let zero_sized_object_a = (:struct_with_no_members){};
let zero_sized_object_b = (:struct_with_zero_sized_members){
    .a = uninit,
    .b = uninit,
};
let pointer_to_zero_sized_object_a = &zero_sized_object_a;
let pointer_to_zero_sized_object_b = &zero_sized_object_b;
let array_of_zero_sized_object_a = (:[3]typeof(zero_sized_object_a))[zero_sized_object_a...];
let array_of_zero_sized_object_b = (:[3]typeof(zero_sized_object_b))[zero_sized_object_b...];

func add_one[[T]](x: T) T {
    return x + 1;
}

func stmt_return_bool() bool {
    return true;
}

func stmt_return_integer() ssize {
    return 123;
}

func stmt_return_pointer() *byte {
    let x: byte = 'x';
    return &x;
}

func stmt_return_array() [3]byte {
    return (:[3]byte)[0x00...];
}

func stmt_return_slice() []byte {
    return (:[]byte)[];
}

func stmt_defer_single_return() ssize {
    defer {
        var _: ssize = 456;
    }
    return 123;
}

func stmt_defer_double_return() ssize {
    defer {
        return 456;
    }
    return 123;
}

func stmt_if_elif_else() ssize {
    if false {
        return 123;
    }
    elif true {
        return 456;
    }
    else {
        return 789;
    }
    return 0;
}

func stmt_for_range() void {
    for _ in 3 {
    }
    for _ in 1:5 {
    }
}

func stmt_for_expr() void {
    for true {
    }
    for false {
    }
}

func stmt_break_and_continue() void {
    for true {
        break;
    }
    for false {
        continue;
    }
}

func stmt_assign() void {
    var _: ssize = 123;
}

func stmt_expr() void {
    123s;
}

func rvalue_symbol() void {
    str_variable;
    str_constant;
}

func rvalue_value() void {
    123u8;
    0xAAy;
    true;
}

func rvalue_bytes() void {
    "abc123";
}

func rvalue_array_list() void {
    (:[3]void)[void_constant, void_constant, void_constant];
    (:[3]void)[void_constant...];
    (:[5]ssize)[1, 2, 3, 4, 5];
    (:[5]ssize)[1, 2, 3...];
}

func rvalue_slice_list() void {
    (:[]void)[void_constant, void_constant, void_constant];
    (:[]ssize)[1, 2, 3, 4, 5];
}

func rvalue_slice() void {
    (:[]ssize){int_constant_pointer, 1u};
}

func rvalue_struct() void {
    (:struct_with_no_members){};
    (:struct_with_zero_sized_members){
        .a = uninit,
        .b = uninit,
    };
    (:struct_with_zero_and_non_zero_sized_members){
        .a = uninit,
        .b = 123,
        .c = uninit,
        .d = uninit,
        .e = 456,
        .f = (:point){.x = uninit, .y = 789},
    };
    (:point){
        .x = 123,
        .y = uninit
    };
}

func rvalue_cast() void {
    (:u8)int_constant;
    (:u16)int_constant;
    (:u32)int_constant;
    (:u64)int_constant;
    (:usize)int_constant;
    (:s8)int_constant;
    (:s16)int_constant;
    (:s32)int_constant;
    (:s64)int_constant;
    (:ssize)int_constant;

    (:usize)int_constant_pointer;
    (:func (*any) point)point::clone;
}

func rvalue_call() void {
    add_one[[ssize]](123);
    struct_with_no_members::init();
    point::init(123, 456);
}

func rvalue_access_index() void {
    (:[3]ssize)[123, 456, 789][1];
    (:[]ssize)[123, 456, 789][1];

    array_constant[1];
    slice_constant[1];

    var array_of_zero_sized = (:[3]void)[void_constant...];
    array_of_zero_sized[1];
    array_of_zero_sized_object_a[1];
    array_of_zero_sized_object_b[1];

    var slice_of_zero_sized = (:[]void)[void_constant, void_constant];
    slice_of_zero_sized[1];
}

func rvalue_access_slice() void {
    (:[]ssize)[123, 456, 789][1:3];

    array_constant[1:3];
    slice_constant[1:3];

    var zero_sized_array_a = (:[3]void)[void_constant...];
    var zero_sized_array_b = (:[0]ssize)[];
    zero_sized_array_a[1:3];
    zero_sized_array_b[0:0];
}

func rvalue_access_member_variable() void {
    (:point){.x = 123, .y = 456}.x;

    let p = (:point){.x = 123, .y = 456};
    p.x;
}

func rvalue_sizeof() void {
    sizeof(s32);
    sizeof(s64);
    sizeof(point);
    sizeof(typeof((:point){.x = 123, .y = 456}));
}

func rvalue_alignof() void {
    alignof(s32);
    alignof(s64);
    alignof(point);
    alignof(typeof((:point){.x = 123, .y = 456}));
}

func rvalue_unary_not() void {
    not true;
    not false;
}

func rvalue_unary_pos() void {
    +int_constant;
}

func rvalue_unary_neg() void {
    -int_constant;
}

func rvalue_unary_neg_wrapping() void {
    -%int_constant;
}

func rvalue_unary_bitnot() void {
    ~int_constant;
}

func rvalue_unary_dereference() void {
    *int_variable_pointer;
    *int_constant_pointer;
    int_variable_pointer.*;
    int_constant_pointer.*;
}

func rvalue_unary_addressof() void {
    &int_variable_pointer;
    &int_constant_pointer;
}

func rvalue_unary_startof() void {
    startof((:[]ssize)[123, 456, 789]);
    startof(slice_constant);
}

func rvalue_unary_countof() void {
    countof((:[3]ssize)[123, 456, 789]);
    countof(array_constant);

    countof((:[]ssize)[123, 456, 789]);
    countof(slice_constant);
}

func rvalue_binary_or() void {
    bool_constant_true or bool_constant_true;
    bool_constant_true or bool_constant_false;
    bool_constant_false or bool_constant_true;
    bool_constant_false or bool_constant_false;
    true or stmt_return_bool();
}

func rvalue_binary_and() void {
    bool_constant_true and bool_constant_true;
    bool_constant_true and bool_constant_false;
    bool_constant_false and bool_constant_true;
    bool_constant_false and bool_constant_false;
    true and stmt_return_bool();
}

func rvalue_binary_shl() void {
    int_constant << 0u;
    int_constant << 1u;
    int_constant << 2u;
    int_constant << 2u;
    int_constant << 63u;
    int_constant << 64u;
    int_constant << 100u;

    var x = 0xDEADBEEFu32;
    x << 0u;
    x << 1u;
    x << 2u;
    x << 2u;
    x << 63u;
    x << 64u;
    x << 100u;
}

func rvalue_binary_shr() void {
    int_constant >> 0u;
    int_constant >> 1u;
    int_constant >> 2u;
    int_constant >> 2u;
    int_constant >> 63u;
    int_constant >> 64u;
    int_constant >> 100u;

    var x = 0xDEADBEEFu32;
    x >> 0u;
    x >> 1u;
    x >> 2u;
    x >> 2u;
    x >> 63u;
    x >> 64u;
    x >> 100u;
}

func rvalue_binary_eq() void {
    bool_variable_true == bool_constant_true;
    bool_variable_true == bool_constant_false;
    int_variable == int_constant;
    int_variable_pointer == int_constant_pointer;
}

func rvalue_binary_ne() void {
    bool_variable_true != bool_constant_true;
    bool_variable_true != bool_constant_false;
    int_variable != int_constant;
    int_variable_pointer != int_constant_pointer;
}

func rvalue_binary_le() void {
    int_variable <= int_constant;
    int_variable_pointer <= int_constant_pointer;
}

func rvalue_binary_lt() void {
    int_variable < int_constant;
    int_variable_pointer < int_constant_pointer;
}

func rvalue_binary_ge() void {
    int_variable >= int_constant;
    int_variable_pointer >= int_constant_pointer;
}

func rvalue_binary_gt() void {
    int_variable > int_constant;
    int_variable_pointer > int_constant_pointer;
}

func rvalue_binary_add() void {
    int_variable + int_constant;
    int_variable + stmt_return_integer();
}

func rvalue_binary_add_wrapping() void {
    int_variable +% int_constant;
    int_variable +% stmt_return_integer();
}

func rvalue_binary_sub() void {
    int_variable - int_constant;
    int_variable - stmt_return_integer();
}

func rvalue_binary_sub_wrapping() void {
    int_variable -% int_constant;
    int_variable -% stmt_return_integer();
}

func rvalue_binary_mul() void {
    int_variable * int_constant;
    int_variable * stmt_return_integer();
}

func rvalue_binary_mul_wrapping() void {
    int_variable *% int_constant;
    int_variable *% stmt_return_integer();
}

func rvalue_binary_div() void {
    int_variable / int_constant;
    int_constant / int_variable;
}

func rvalue_binary_rem() void {
    int_variable % int_constant;
    int_constant % int_variable;
}

func rvalue_binary_bitor() void {
    bool_constant_true | bool_constant_true;
    bool_constant_true | bool_constant_false;
    bool_constant_false | bool_constant_true;
    bool_constant_false | bool_constant_false;
    true | stmt_return_bool();
    int_variable | int_constant;
    int_constant | int_variable;
    int_constant | stmt_return_integer();
}

func rvalue_binary_bitand() void {
    bool_constant_true & bool_constant_true;
    bool_constant_true & bool_constant_false;
    bool_constant_false & bool_constant_true;
    bool_constant_false & bool_constant_false;
    true & stmt_return_bool();
    int_variable & int_constant;
    int_constant & int_variable;
    int_constant & stmt_return_integer();
}

func rvalue_binary_bitxor() void {
    bool_constant_true ^ bool_constant_true;
    bool_constant_true ^ bool_constant_false;
    bool_constant_false ^ bool_constant_true;
    bool_constant_false ^ bool_constant_false;
    true ^ stmt_return_bool();
    int_variable ^ int_constant;
    int_constant ^ int_variable;
    int_constant ^ stmt_return_integer();
}

func lvalue_symbol() void {
    &int_variable;
    &int_constant;
}

func lvalue_access_index() void {
    &array_constant[1];
    &slice_constant[1];
    &array_of_zero_sized_object_a[1];
    &array_of_zero_sized_object_b[1];
}

func lvalue_access_member_variable() void {
    let p = (:point){.x = 123, .y = 456};
    &p.x;
}

func lvalue_unary_dereference() void {
    &*int_constant_pointer;
    &int_constant_pointer.*;
}

func function_taking_and_returning_zero_sized_types(x: void, y: struct_with_no_members, z: struct_with_zero_sized_members) struct_with_no_members {
    x;
    y;
    z;
    return y;
}

func function_taking_and_returning_pointers_to_zero_sized_types(x: *void, y: *struct_with_no_members, z: *struct_with_zero_sized_members) *struct_with_no_members {
    x;
    y;
    z;
    return y;
}

func main() void {
    var v: void = uninit;
    var _ = function_taking_and_returning_zero_sized_types(v, zero_sized_object_a, zero_sized_object_b);
    var _ = function_taking_and_returning_pointers_to_zero_sized_types(&v, &zero_sized_object_a, &zero_sized_object_b);
}
